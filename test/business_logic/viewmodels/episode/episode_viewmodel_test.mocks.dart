// Mocks generated by Mockito 5.0.16 from annotations
// in tv_shows/test/business_logic/viewmodels/episode/episode_viewmodel_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tv_shows/business_logic/models/image_data.dart' as _i2;
import 'package:tv_shows/services/episodes/episodes_service.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeImageData_0 extends _i1.Fake implements _i2.ImageData {}

/// A class which mocks [EpisodeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEpisodeService extends _i1.Mock implements _i3.EpisodeService {
  MockEpisodeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ImageData> uploadImage() =>
      (super.noSuchMethod(Invocation.method(#uploadImage, []),
              returnValue: Future<_i2.ImageData>.value(_FakeImageData_0()))
          as _i4.Future<_i2.ImageData>);
  @override
  _i4.Future<void> uploadEpisode(
          {String? showId,
          String? title,
          String? description,
          String? episodeNumber,
          String? season,
          String? mediaId}) =>
      (super.noSuchMethod(
          Invocation.method(#uploadEpisode, [], {
            #showId: showId,
            #title: title,
            #description: description,
            #episodeNumber: episodeNumber,
            #season: season,
            #mediaId: mediaId
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}
