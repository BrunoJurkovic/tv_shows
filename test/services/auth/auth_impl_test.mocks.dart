// Mocks generated by Mockito 5.0.16 from annotations
// in tv_shows/test/services/auth/auth_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: unnecessary_overrides

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tv_shows/business_logic/utils/auth_utils.dart' as _i7;
import 'package:tv_shows/business_logic/utils/media_utils.dart' as _i5;
import 'package:tv_shows/services/hot_storage/hot_storage.dart' as _i6;
import 'package:tv_shows/services/http/http_service.dart' as _i4;
import 'package:tv_shows/services/storage/storage_service.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i2.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> updateToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#updateToken, [token]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String getToken() =>
      (super.noSuchMethod(Invocation.method(#getToken, []), returnValue: '')
          as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [BaseHttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseHttpService extends _i1.Mock implements _i4.BaseHttpService {
  MockBaseHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> get({_i4.BaseHttpGetRequest? request}) =>
      (super.noSuchMethod(Invocation.method(#get, [], {#request: request}),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> post({_i4.BaseHttpPostRequest? request}) =>
      (super.noSuchMethod(Invocation.method(#post, [], {#request: request}),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> delete({_i4.BaseHttpDeleteRequest? request}) =>
      (super.noSuchMethod(Invocation.method(#delete, [], {#request: request}),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> postFormData({_i5.MediaRequest? request}) => (super
      .noSuchMethod(Invocation.method(#postFormData, [], {#request: request}),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [HotStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotStorageService extends _i1.Mock implements _i6.HotStorageService {
  MockHotStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get token =>
      (super.noSuchMethod(Invocation.getter(#token), returnValue: '')
          as String);
  @override
  void updateToken(String? token) =>
      super.noSuchMethod(Invocation.method(#updateToken, [token]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LoginRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRequest extends _i1.Mock implements _i7.LoginRequest {
  MockLoginRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get username =>
      (super.noSuchMethod(Invocation.getter(#username), returnValue: '')
          as String);
  @override
  String get password =>
      (super.noSuchMethod(Invocation.getter(#password), returnValue: '')
          as String);
  @override
  String get endpoint =>
      (super.noSuchMethod(Invocation.getter(#endpoint), returnValue: '')
          as String);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toString() => super.toString();
}
